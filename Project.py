# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GKuSbbuC1eWyEXiLhzEJKKp6ud0JCXf6
"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsRegressor
from sklearn import metrics
from sklearn.impute import SimpleImputer
from sklearn.linear_model import LinearRegression

from sklearn.preprocessing import LabelEncoder

student_dataset=pd.read_csv('/content/sample_data/student_habits_performance.csv')

student_dataset.head()

student_dataset.shape

student_dataset.isnull().sum()

student_dataset.info()

student_dataset.isnull().sum()

student_dataset.describe()

# distribution of age value
sns.set()
plt.figure(figsize=(6,6))
sns.distplot(student_dataset['age'])
plt.title('Age Distribution')
plt.show()

# gender column
plt.figure(figsize=(6,6))
sns.countplot(x='gender',data=student_dataset)
plt.title('Gender Distribution')
plt.show()

# study hours per day
plt.figure(figsize=(6,6))
sns.distplot(student_dataset['study_hours_per_day'])
plt.title('Study Hours Distribution')
plt.show()

# social media hours
plt.figure(figsize=(6,6))
sns.distplot(student_dataset['social_media_hours'])
plt.title('Social Media Hours Distribution')
plt.show()

# netflix hours
plt.figure(figsize=(6,6))
sns.distplot(student_dataset['netflix_hours'])
plt.title('Netflix Hours Distribution')
plt.show()

# part time job
plt.figure(figsize=(6,6))
sns.countplot(x='part_time_job',data=student_dataset)
plt.title('Part Time Job Distribution')
plt.show()

# attendance percentage
plt.figure(figsize=(6,6))
sns.distplot(student_dataset['attendance_percentage'])
plt.title('Attendance Percentage Distribution')
plt.show()

# sleep hours
plt.figure(figsize=(6,6))
sns.distplot(student_dataset['sleep_hours'])
plt.title('Sleep Hours Distribution')
plt.show()

# diet quality
plt.figure(figsize=(6,6))
sns.countplot(x='diet_quality',data=student_dataset)
plt.title('Diet Quality Distribution')
plt.show()

# exercise frequency
plt.figure(figsize=(6,6))
sns.countplot(x='exercise_frequency',data=student_dataset)
plt.title('Exercise Frequency Distribution')
plt.show()

# parental education level
plt.figure(figsize=(6,6))
sns.countplot(x='parental_education_level',data=student_dataset)
plt.title('Parental Education Level Distribution')
plt.show()

# internet quality
plt.figure(figsize=(6,6))
sns.countplot(x='internet_quality',data=student_dataset)
plt.title('Internet Quality Distribution')
plt.show()

# mental health rating
plt.figure(figsize=(6,6))
sns.countplot(x='mental_health_rating',data=student_dataset)
plt.title('Mental Health Rating Distribution')
plt.show()

# extracurricular participation
plt.figure(figsize=(6,6))
sns.countplot(x='extracurricular_participation',data=student_dataset)
plt.title('Extracurricular Participation Distribution')
plt.show()

# encoding gender column
student_dataset.replace({'gender':{'Male':0, 'Female':1,'Other':2}},inplace=True)
# encoding part time job column
student_dataset.replace({'part_time_job':{'Yes':0, 'No':1}},inplace=True)
# encoding diet quality column
student_dataset.replace({'diet_quality':{'Fair':0,'Good':1,'Poor':2,}},inplace=True)
# encoding parential educationlevel
student_dataset.replace({'parental_education_level':{'Master':0, 'High School':1,'Bachelor':2}},inplace=True)
# encoding internat quality
student_dataset.replace({'internet_quality':{'Poor':0, 'Good':1,'Average':2}},inplace=True)
# encoding extracurricalr participatio rating
student_dataset.replace({'extracurricular_participation':{'Yes':0, 'No':1}},inplace=True)

print(X)

student_dataset.isnull().sum()

student_id_cleaned = student_dataset.dropna()

student_dataset['parental_education_level'] = student_dataset['parental_education_level'].fillna(student_dataset['parental_education_level'].mean())

X=student_dataset.drop(columns='exam_score',axis=1)
Y=student_dataset['exam_score']

print(Y)

X_train, X_test,Y_train,Y_test = train_test_split(X,Y,test_size=0.2,random_state=2)#0.2 means 20% of data is used for test and remaining 80 % is used for train

print(X.shape,X_train.shape,X_test.shape)

# loading knn regression model
knn=KNeighborsRegressor(n_neighbors=5)

print(X_train.dtypes)

X_train.head()

X_train.isnull().sum()

knn.fit(X_train,Y_train)

training_Data_prediction=knn.predict(X_train)

# R  squared value in range [0, 1]
r2_train=metrics.r2_score(Y_train,training_Data_prediction)
print('R squared value for training data: ', r2_train)

# prediction on test data
test_Data_prediction=knn.predict(X_test)

r2_test=metrics.r2_score(Y_test,test_Data_prediction)
print('R squared value for training data: ', r2_test)

input_data=(1000,23,1,0.0,1.2,1.1,1,85.0,8.0,0,6,0,2,8,0)
# changing the input data to a tuple
input_data_as_numpy_array=np.asarray(input_data)

# reshape the array
input_data_reshaped=input_data_as_numpy_array.reshape(1,-1)

prediction=knn.predict(input_data_reshaped)

print(prediction)

print("The insurance cost is USD : ",prediction[0])

# loading linear regression model
regressor=LinearRegression()

regressor.fit(X_train,Y_train)

# prediction on training data
training_Data_prediction=regressor.predict(X_train)

# R  squared value in range [0, 1]
r2_train=metrics.r2_score(Y_train,training_Data_prediction)
print('R squared value for training data: ', r2_train)

# prediction on test data
test_Data_prediction=regressor.predict(X_test)

r2_test=metrics.r2_score(Y_test,test_Data_prediction)
print('R squared value for training data: ', r2_test)

input_data=(1001,20,1,6.9,2.8,2.3,1,97.3,4.6,1,6, 1,2,8,1)
# changing the input data to a tup
input_data_as_numpy_array=np.asarray(input_data)

# reshape the array
input_data_reshaped=input_data_as_numpy_array.reshape(1,-1)

prediction=regressor.predict(input_data_reshaped)

print(prediction)

print("The insurance cost is USD : ",prediction[0])

